#+title:The Programming Club Linux Workshop
#+author:Isaac "Jelly" Hawkins
#+HTML_HEAD: <style> img{ width: 50%; } </style>
* Pre Workshop Business
  [[file:Images/TPC.png]]
- The Programming Club wants you to sign up for 2022 [[https://forms.office.com/r/Le2VPKyrYG][here]]
- There will be question breaks during the presentation 
* Why use Linux for a server?
- Linux is Free Software
  - Free to modify
  - Free to use with no restrictions
- Linux is extremely lightweight
- Linux can run with almost nothing on top of it

** Most importantly...
- Linux has a lot of software support for running web-servers
  - Apache
  - Nginx
** But what Linux distribution are we going to be using for this workshop?
[[file:Images/Linux Distros.png]]
- There are many different flavors of Linux
- However today we are just going to focus on using [[https://ubuntu.com/#download][Ubuntu 20.04 LTS]]
* Why not Windows or Mac OS for a server?
- Windows and Mac OS are owned by parents companies that are restrictive with what you can do with them
- Windows and Mac have a lot of components that might be unnecessary for running just a web server on top
[[file:Images/Windows Server.jpg]]

* One more advantage to running a Linux Web server:
- Linux is very lightweight, which makes it easy to *Virtualize*
  [[file:Images/Virtual Server.png]]
* Why would we want to Virtualize our Web server?
- Hardware costs a lot of money
- With Virtualization solutions, we can run many separate instances of Linux
  - So we can run many web-servers on just one computer
** What Virtualization Solution are we going to be using
- VMware Workstation Pro 16
     [[file:Images/VMware-16.png]]
- Virtual Box
- If you are using Apple M1 Silicon (A new Mac-book): ATM should work

* Package Manager
- Ubuntu (and other Linux distributions) use what is known as a *package manager*
- Package Managers make it easy for system administrators to manage the software on their machines
- Ubuntu uses *apt* as its package manager
* Installing Nginx
#+BEGIN_SRC bash
sudo apt install Nginx
#+END_SRC
- sudo means to run it as the system administrator (or root)
- apt is the program we are calling
- install is the instruction
- Nginx is the software we want to install
* Setting up Nginx
- First we will check if Nginx is running using
#+begin_src bash
systemctl status Nginx
#+end_src
- if it isn't running we can run
#+begin_src bash
systemctl enable Nginx
systemctl start Nginx
#+end_src
- this will enable it to run next time we start the system and run it this time
- Nginx is what we call a *daemon*
** Daemons
- Daemons are programs that run in the background on our system
- systemctl is part of a larger software suite called systemd
- systemd manages daemons for a system administrator
 [[file:Images/Daemon.png]] 
** Setting up Nginx (cont.)
- Now that we know that Nginx is running,
  - We can ask ubuntu's Uncomplicated Fire Wall (ufw) to let Nginx through
#+begin_src bash
sudo ufw enable
sudo ufw allow 'Nginx HTTP'
#+end_src
- We can check if ufw is letting Nginx through
#+begin_src bash
sudo ufw status
#+end_src
- Now if we open up firefox on Ubuntu
  - go to our local host at [[https://127.0.0.1:80]], we will see Nginx running

** Publishing our own site
- Now that we have Nginx publishing an example site, we can publish our own
- If you want to use the same site I'm using you can download it from [[https://github.com/rmit-programming-club/Linux-Workshop/blob/main/index.html][here]]
- This example site is in what we call a tar.gz format, which we can extract using a linux utlity called tar
- tar is used in a lot of linux systems as as the defacto way to publish many files as one file
#+begin_src bash
tar -xzvf website.tar.gz website
#+end_src
- this command has many parts
*** untar
#+begin_src bash
tar -xzvf website.tar.gz website
#+end_src
#+end_src
- for the command tar -xzvf website there are three main parts
  - x means we want to untar (unzip) the file
  - z means we want to decompress it
  - v means we want tar to be verbose (tell us exactly what is going on)
  - f means we want to specify an output directory
** putting the website on Nginx
- Nginx keeps all web content in a directory called /var/www/
*** The unix file system
[[file:Images/Unix Filesystem.png]]
- Unix systems (which includes Linux) have a standard filesystem
- the /var/ director is meant specifically to contain files that are unique to this linux instance
  - /www/ is for web related content
- Because of this we can easily publish our site by copying all the files in website to /var/www/
#+begin_src bash
sudo mv website /var/www/
#+end_src
- In this command we are asking the system to move (mv) the directory website to /var/www/
* Congratulations
- You have now created a Linux Webserver, that can be used to serve web content even in the real world
- These tools are used to serve 23.21%[1] of the content on the web

[1] https://news.netcraft.com/archives/2020/12/22/december-2020-web-server-survey.html
